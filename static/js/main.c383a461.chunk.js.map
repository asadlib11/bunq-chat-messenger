{"version":3,"sources":["generateFakeData.js","components/Avatar/Avatar.jsx","components/ContactBox/ContactBox.jsx","components/Message/Message.jsx","components/MessageBox/MessageBox.jsx","components/ChatInputBox/ChatInputBox.jsx","components/Welcome/Welcome.js","components/ButtonsBox/ButtonsBox.jsx","utils/constants.js","utils/apiclient.js","components/InformationModal/InformationModal.jsx","containers/messenger/index.js","containers/loginPage/index.js","App.js","serviceWorker.js","index.js","assets/BunqLogo.svg","assets/done_all.svg","assets/tag_faces.svg","assets/mic.svg","assets/send.svg","assets/group_chat.svg","assets/personal_chat.svg","assets/log-out.svg","assets/information.svg"],"names":["faker","require","User","this","id","random","uuid","name","findName","avatar","internet","Message","isMainUser","msg","date","lorem","words","helpers","randomize","Array","keys","recent","mainUser","Avatar","map","contact","messages","_","i","filter","m","user","showName","welcome","className","src","alt","ContactBox","setContactSelected","onClick","console","log","lastseen","message","senderName","senderId","style","color","fontWeight","timestamp","doubleCheck","MessageBox","getMoreMessages","shouldScroll","furtherMessages","isLoading","pollingMessage","useEffect","pollingMessages","setInterval","length","clearInterval","endDiv","useRef","current","scrollIntoView","sort","a","b","key","textAlign","size","float","clear","ref","ChatInputBox","setMessage","pushMessage","emojiIcon","type","placeholder","value","onChange","e","target","onKeyDown","sendIcon","micIcon","Welcome","width","introImg","ButtonsBox","personalChatHandler","groupChatHandler","logoutHandler","data-tip","margin","cursor","personalChat","groupChat","logoutIcon","availableUsers","label","bgColor","apiClient","axios","create","baseURL","timeout","InformationModal","modalVisible","conversationInfo","handleOk","handleCancel","useState","members","setMembers","getMembers","users","userid","push","title","visible","onOk","onCancel","okType","conversation","conversationId","marginLeft","member","Messenger","logout","allConvos","setAllConvos","data","setData","contactSelected","currentMessages","setCurrentMessages","search","filteredContacts","setFilteredContacts","isGroupChatModalVisible","setIsGroupChatModalVisible","isPersonalChatModalVisible","setIsPersonalChatModalVisible","React","personalChatContact","setPersonalChatContact","groupChatContact","setGroupChatContact","groupChatName","setGroupChatName","currentMessageInfo","setCurrentMessageInfo","showInfoModal","setShowInfoModal","usersForChat","el","setShouldScroll","setFurtherMessages","messageLoadLoader","setMessageLoadLoader","getConversations","filterContacts","getMessages","get","myData","subArray","slice","handleLoadMoreMessage","post","lastMessageId","result","toLowerCase","includes","handlePersonalChatOk","handleGroupChatOk","trim","join","handleInfoOpen","handleInfoClose","moreMessages","marginTop","marginBottom","infoIcon","border","event","Group","options","checkedValues","Login","selectUser","height","bunqLogo","background","App","setUser","userData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.c383a461.chunk.js","sourcesContent":["const faker = require('faker')\n\nclass User {\n    constructor() {\n        this.id = faker.random.uuid()\n        this.name = faker.name.findName()\n        this.avatar = faker.internet.avatar()\n    }\n}\nexport class Message {\n    constructor(isMainUser, msg, date) {\n        this.id = faker.random.uuid()\n        this.msg = msg || faker.lorem.words(faker.helpers.randomize([...Array(20).keys()]))\n        this.isMainUser = isMainUser\n        this.date = date || faker.date.recent()\n    }\n}\n\nexport const mainUser = new User()\n\nexport const contacts = [...Array(15).keys()].map(() => new User())\n\nexport const contactsMessages = contacts.map((contact) => {\n    return {\n        contact,\n        messages: [...Array(50).keys()]\n            .map((_, i) => {\n                return (i + 1) % 2 === 0 ? new Message(true) : new Message(false)\n            })\n            .filter((m) => m.msg),\n    }\n})\n","import React from \"react\";\n\nconst Avatar = ({ user, showName, welcome }) => {\n  return (\n    <div className=\"avatar-component\">\n      <img className=\"avatar\" src={user.avatar} alt=\"\" />\n      {showName && (\n        <h3 className=\"avatar\">\n          {welcome && \"Welcome \"}\n          {showName}\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from \"react\";\nimport Avatar from \"../Avatar/Avatar\";\n\nexport default function ContactBox({ contact, setContactSelected }) {\n  return (\n    <div\n      className=\"contact-box\"\n      onClick={() => {\n        console.log(\"contact\", contact);\n        setContactSelected(contact);\n      }}\n    >\n      <Avatar user={contact}></Avatar>\n      <div className=\"right-section\">\n        <div className=\"contact-box-header\">\n          <h3 className=\"avatar-title\">\n            {contact.name ? contact.name : \"Unnamed conversation\"}\n          </h3>\n          <span className=\"time-mark\">\n            {contact.lastseen ? contact.lastseen : \"No Last Seen time\"}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport doubleCheck from \"../../assets/done_all.svg\";\n\nexport default function Message({ message, id }) {\n  let senderName = \"\";\n  switch (message.senderId) {\n    case \"1\":\n      senderName = \"Wessel\";\n      break;\n\n    case \"2\":\n      senderName = \"Quint\";\n      break;\n\n    case \"3\":\n      senderName = \"Mani\";\n      break;\n\n    case \"4\":\n      senderName = \"Menno\";\n      break;\n\n    case \"5\":\n      senderName = \"Patrick\";\n      break;\n\n    default:\n      senderName = \"Unknown User\";\n      break;\n  }\n  return (\n    <div className={`message ${message.senderId === id ? \"sent\" : \"received\"}`}>\n      <div>\n        <span style={{ color: \"Red\", fontWeight: \"bolder\" }}>{senderName}</span>\n      </div>\n      {message.message}\n      <div className=\"metadata\">\n        <span className=\"date\">{message.timestamp}</span>\n        <img src={doubleCheck} alt=\"\" className=\"icon-small\" />\n      </div>\n    </div>\n  );\n}\n","import React, { useRef, useEffect } from \"react\";\nimport Message from \"../Message/Message\";\nimport { Spin } from \"antd\";\n\nexport default function MessageBox({\n  messages,\n  id,\n  getMoreMessages,\n  shouldScroll = true,\n  furtherMessages,\n  isLoading,\n  pollingMessage,\n}) {\n  useEffect(() => {\n    let pollingMessages = setInterval(function () {\n      if (messages.length > 0) {\n        pollingMessage(messages[messages.length - 1].id);\n      }\n    }, 3000);\n\n    return () => clearInterval(pollingMessages);\n  }, [messages]);\n\n  const endDiv = useRef(null);\n  useEffect(() => {\n    if (shouldScroll) {\n      endDiv.current.scrollIntoView();\n    }\n  });\n\n  return (\n    <div className=\"chats\">\n      {messages\n        .sort((a, b) => a.id - b.id)\n        .map((m) => {\n          return <Message message={m} key={m.id} id={id} />;\n        })}\n      {messages.length >= 50 ? (\n        <div style={{ textAlign: \"center\" }}>\n          {!isLoading ? (\n            furtherMessages && (\n              <button className=\"load-more-messages\" onClick={getMoreMessages}>\n                Load More Messages\n              </button>\n            )\n          ) : (\n            <Spin size={\"small\"} />\n          )}\n        </div>\n      ) : (\n        \"\"\n      )}\n      {shouldScroll && (\n        <div style={{ float: \"right\", clear: \"both\" }} ref={endDiv}></div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport emojiIcon from \"../../assets/tag_faces.svg\";\nimport micIcon from \"../../assets/mic.svg\";\nimport sendIcon from \"../../assets/send.svg\";\n\nexport default function ChatInputBox({ message, setMessage, pushMessage }) {\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\" && message) {\n      pushMessage();\n    }\n  };\n  return (\n    <div className=\"chat-input-box\">\n      <div className=\"icon emoji-selector\">\n        <img src={emojiIcon} alt=\"\" />\n      </div>\n\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type a message\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n      </div>\n\n      <div className=\"icon send\" onClick={pushMessage}>\n        <img src={message ? sendIcon : micIcon} alt=\"\" />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport introImg from \"../../assets/BunqLogo.svg\";\nexport default function Welcome() {\n  return (\n    <div className=\"welcome\">\n      <div className=\"banner\" style={{ width: \"70%\" }}></div>\n      <img src={introImg} alt=\"\" />\n      <h2>Welcome to Bunqr Chat</h2>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport groupChat from \"../../assets/group_chat.svg\";\nimport personalChat from \"../../assets/personal_chat.svg\";\nimport logoutIcon from \"../../assets/log-out.svg\";\n\nexport default function ButtonsBox({\n  personalChatHandler,\n  groupChatHandler,\n  logoutHandler,\n}) {\n  return (\n    <div className=\"buttonsBox\">\n      <div\n        data-tip=\"Create Personal Chat\"\n        style={{ margin: \"20px auto\", width: \"40px\", cursor: \"pointer\" }}\n        onClick={personalChatHandler}\n      >\n        <img src={personalChat} alt=\"Personal Chat\" />\n      </div>\n      <div\n        data-tip=\"Create Group Chat\"\n        style={{ margin: \"20px auto\", width: \"40px\", cursor: \"pointer\" }}\n        onClick={groupChatHandler}\n      >\n        <img src={groupChat} alt=\"Group Chat\" />\n      </div>\n      <div\n        data-tip=\"Log Out\"\n        style={{ margin: \"20px auto\", width: \"40px\", cursor: \"pointer\" }}\n        onClick={logoutHandler}\n      >\n        <img style={{ width: \"40px\" }} src={logoutIcon} alt=\"Log Out\" />\n      </div>\n      <ReactTooltip />\n    </div>\n  );\n}\n","export const API_URL = \"http://assignment.bunq.com\" || process.env.API_URL;\nexport const availableUsers = [\n  { label: \"Wessel\", value: \"1\", bgColor: \"rgb(255 209 62)\" },\n  { label: \"Quint\", value: \"2\", bgColor: \"rgb(242 137 42)\" },\n  { label: \"Mani\", value: \"3\", bgColor: \"rgb(220 97 86)\" },\n  { label: \"Menno\", value: \"4\", bgColor: \"rgb(98 182 79)\" },\n  { label: \"Patrick\", value: \"5\", bgColor: \"rgb(77 147 195)\" },\n];\n","import axios from \"axios\";\nimport { API_URL } from \"./constants\";\n\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  timeout: 20000\n});\n\nexport default apiClient;","import React, { useEffect, useState } from \"react\";\nimport { Modal } from \"antd\";\n\nexport default function InformationModal({\n  modalVisible,\n  conversationInfo,\n  handleOk,\n  handleCancel,\n}) {\n  const [members, setMembers] = useState([]);\n\n  useEffect(() => {\n    getMembers();\n  }, []);\n\n  const getMembers = () => {\n    if (conversationInfo.users.length <= 0) {\n      return;\n    }\n    const users = [];\n    conversationInfo.users.map((user) => {\n      switch (user.userid) {\n        case \"1\":\n          users.push(\"Wessel\");\n          break;\n\n        case \"2\":\n          users.push(\"Quint\");\n          break;\n\n        case \"3\":\n          users.push(\"Mani\");\n          break;\n\n        case \"4\":\n          users.push(\"Menno\");\n          break;\n\n        case \"5\":\n          users.push(\"Patrick\");\n          break;\n\n        default:\n          users.push(\"Unknown User\");\n          break;\n      }\n    });\n    setMembers(users);\n  };\n\n  return (\n    <Modal\n      title=\"Conversation Information\"\n      visible={modalVisible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      okType={\"primary\"}\n    >\n      <p>\n        <span style={{ fontWeight: \"bold\" }}>Conversation Id:</span>{\" \"}\n        {conversationInfo.conversation.conversationId || \"none\"}\n        <br></br>\n        <span style={{ fontWeight: \"bold\" }}>Conversation Name:</span>{\" \"}\n        {conversationInfo.conversation.name || \"none\"}\n      </p>\n      <div>\n        <p>\n          Members:\n          <ol style={{ marginLeft: \"6%\" }}>\n            {members.map((member, key) => (\n              <li key={key}>{member}</li>\n            ))}\n          </ol>\n        </p>\n      </div>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Modal, Checkbox, Radio, Spin } from \"antd\";\nimport { mainUser } from \"../../generateFakeData\";\nimport Avatar from \"../../components/Avatar/Avatar\";\nimport ContactBox from \"../../components/ContactBox/ContactBox\";\nimport MessageBox from \"../../components/MessageBox/MessageBox\";\nimport ChatInputBox from \"../../components/ChatInputBox/ChatInputBox\";\nimport ReactTooltip from \"react-tooltip\";\nimport Welcome from \"../../components/Welcome/Welcome\";\nimport ButtonsBox from \"../../components/ButtonsBox/ButtonsBox\";\nimport apiClient from \"../../utils/apiclient\";\nimport infoIcon from \"../../assets/information.svg\";\nimport InformationModal from \"../../components/InformationModal/InformationModal\";\nimport { availableUsers } from \"../../utils/constants\";\n\nexport default function Messenger({ id, name, logout }) {\n  const [allConvos, setAllConvos] = useState([]);\n  const [data, setData] = useState([]); // contact boxes data\n  const [contactSelected, setContactSelected] = useState({}); // conversation selected data\n  const [currentMessages, setCurrentMessages] = useState([]); // current messages are messages in the conversation/Message box\n  const [message, setMessage] = useState(\"\"); // message is the text entered by user\n  const [search, setSearch] = useState(\"\"); // search textbar state\n  const [filteredContacts, setFilteredContacts] = useState([]); // filtered contacts after search\n  const [isGroupChatModalVisible, setIsGroupChatModalVisible] = useState(false); // toggle for opening group chat creation modal\n  const [isPersonalChatModalVisible, setIsPersonalChatModalVisible] =\n    useState(false); // toggle for opening personal chat creation modal\n  const [personalChatContact, setPersonalChatContact] = React.useState(null); // value holder for personal chat contact selected\n  const [groupChatContact, setGroupChatContact] = React.useState(null); // value holder for group chat contact selected\n  const [groupChatName, setGroupChatName] = React.useState(\"\"); // value holder for group chat contact selected\n  const [currentMessageInfo, setCurrentMessageInfo] = React.useState(null);\n  const [showInfoModal, setShowInfoModal] = React.useState(false);\n  const usersForChat = availableUsers.filter((el) => el.value !== id);\n  const [shouldScroll, setShouldScroll] = useState(true);\n  const [furtherMessages, setFurtherMessages] = useState(true);\n  const [messageLoadLoader, setMessageLoadLoader] = useState(false);\n\n  useEffect(() => {\n    getConversations();\n  }, []);\n\n  useEffect(() => {\n    filterContacts(data, search);\n    getMessages(contactSelected);\n  }, [contactSelected, data, search]);\n\n  useEffect(() => {}, [shouldScroll, furtherMessages, messageLoadLoader]);\n\n  const getConversations = async () => {\n    try {\n      const { data } = await apiClient.get(`/conversation/user/${id}`);\n      const myData = data.sort(\n        (a, b) => b.conversation.conversationId - a.conversation.conversationId\n      );\n      setAllConvos(myData);\n      const subArray = myData.slice(0, 19);\n      setData(subArray);\n    } catch (err) {\n      await getConversations();\n    }\n  };\n\n  const loadMoreMessages = () => {\n    const moreMessages = allConvos.slice(data.length, data.length + 20);\n    setData([...data, ...moreMessages]);\n  };\n\n  const getMessages = async (conversation) => {\n    if (conversation && conversation.conversationId) {\n      const { data } = await apiClient.get(\n        `/conversation/${conversation.conversationId}/message/limited?limit=50&offset=0`\n      );\n      setCurrentMessages(data);\n    }\n  };\n\n  const handleLoadMoreMessage = async () => {\n    setMessageLoadLoader(true);\n    const { data } = await apiClient.get(\n      `/conversation/${contactSelected.conversationId}/message/limited?limit=50&offset=${currentMessages.length}`\n    );\n    setShouldScroll(false);\n    if (data.length === 0) {\n      setFurtherMessages(false);\n    }\n    setCurrentMessages([...currentMessages, ...data]);\n    setMessageLoadLoader(false);\n  };\n\n  const pushMessage = async () => {\n    await apiClient.post(\n      `conversation/${contactSelected.conversationId}/message/send`,\n      {\n        message,\n        senderId: id,\n      }\n    );\n    await getMessages(contactSelected);\n    setMessage(\"\");\n  };\n\n  const pollingMessage = async (lastMessageId) => {\n    try {\n      const { data } = await apiClient.get(\n        `/conversation/${contactSelected.conversationId}/new/${lastMessageId}`\n      );\n      setCurrentMessages([...currentMessages, ...data]);\n    } catch (error) {}\n  };\n\n  const filterContacts = (data, search) => {\n    const result = data.filter(({ conversation }) => {\n      if (conversation.name && search !== \"\") {\n        return (\n          !search ||\n          conversation.name.toLowerCase().includes(search.toLowerCase())\n        );\n      } else {\n        return conversation;\n      }\n    });\n    setFilteredContacts(result);\n  };\n\n  const personalChatCreation = () => {\n    setIsPersonalChatModalVisible(true);\n  };\n  const groupChatCreation = () => {\n    setIsGroupChatModalVisible(true);\n  };\n\n  const handlePersonalChatOk = async () => {\n    try {\n      await apiClient.post(\"/conversation/personal\", {\n        users: personalChatContact + \",\" + id,\n      });\n      await getConversations();\n      setIsPersonalChatModalVisible(false);\n    } catch (err) {\n      console.log(\"error occurred\");\n    }\n  };\n\n  const handleGroupChatOk = async () => {\n    if (groupChatContact.length !== 0 && groupChatName.trim() !== \"\") {\n      try {\n        await apiClient.post(\"/conversation/group\", {\n          users: groupChatContact.join(\",\") + \",\" + id,\n          name: groupChatName,\n        });\n        await getConversations();\n        setIsGroupChatModalVisible(false);\n      } catch (err) {\n        console.log(\"error occurred\");\n      }\n    }\n  };\n\n  const handleCancel = () => {\n    setIsGroupChatModalVisible(false);\n    setIsPersonalChatModalVisible(false);\n  };\n\n  const groupChatNameHandler = (event) => {\n    setGroupChatName(event.target.value);\n  };\n\n  const handleInfoOpen = async () => {\n    try {\n      const { data } = await apiClient.get(\n        `/conversation/${contactSelected.conversationId}`\n      );\n      setCurrentMessageInfo(data);\n      setShowInfoModal(true);\n    } catch (error) {\n      console.log(\"error in opening info\", error);\n    }\n  };\n\n  const handleInfoClose = () => {\n    setShowInfoModal(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <aside>\n        <header>\n          <Avatar welcome user={mainUser} showName={name}></Avatar>\n        </header>\n        <ButtonsBox\n          groupChatHandler={groupChatCreation}\n          personalChatHandler={personalChatCreation}\n          logoutHandler={logout}\n        />\n        <div className=\"contact-boxes\">\n          {filteredContacts.map(({ conversation }) => {\n            return (\n              <ContactBox\n                contact={conversation}\n                key={conversation.lastseen + conversation.conversationId}\n                setContactSelected={(contact) => {\n                  setContactSelected(contact);\n                  setShouldScroll(true);\n                  setMessageLoadLoader(false);\n                  setFurtherMessages(true);\n                }}\n              />\n            );\n          })}\n          {filteredContacts.length > 0 ? (\n            <div>\n              <button style={{ width: \"100%\" }} onClick={loadMoreMessages}>\n                Load More Messages\n              </button>\n            </div>\n          ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <Spin\n                style={{\n                  width: \"20%\",\n                  margin: \"auto\",\n                  marginTop: \"30%\",\n                  marginBottom: \"7%\",\n                }}\n                size={\"large\"}\n              />\n              <h3>Loading Messages...</h3>\n            </div>\n          )}\n        </div>\n      </aside>\n      {contactSelected.conversationId ? (\n        <main>\n          <header>\n            <div data-tip=\"Conversation Information\">\n              <img\n                style={{ width: \"29px\" }}\n                src={infoIcon}\n                alt=\"\"\n                onClick={async () => {\n                  await handleInfoOpen();\n                }}\n              />\n            </div>\n            <ReactTooltip />\n            {currentMessageInfo && (\n              <InformationModal\n                conversationInfo={currentMessageInfo}\n                handleCancel={handleInfoClose}\n                handleOk={handleInfoClose}\n                modalVisible={showInfoModal}\n              />\n            )}\n            <Avatar\n              user={contactSelected}\n              showName={\n                contactSelected.name\n                  ? contactSelected.name\n                  : \"Unnamed conversation\"\n              }\n            />\n          </header>\n          <MessageBox\n            id={id}\n            messages={currentMessages}\n            getMoreMessages={handleLoadMoreMessage}\n            shouldScroll={shouldScroll}\n            furtherMessages={furtherMessages}\n            isLoading={messageLoadLoader}\n            pollingMessage={pollingMessage}\n          />\n          <ChatInputBox\n            message={message}\n            setMessage={setMessage}\n            pushMessage={pushMessage}\n          />\n        </main>\n      ) : (\n        <Welcome />\n      )}\n      <Modal\n        title=\"Create Group Chat\"\n        visible={isGroupChatModalVisible}\n        onOk={handleGroupChatOk}\n        onCancel={handleCancel}\n      >\n        <div\n          className=\"chat-input\"\n          style={{ margin: \"auto\", textAlign: \"center\", marginBottom: \"30px\" }}\n        >\n          <h3>Enter a groupchat name</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Enter a group chat name\"\n            style={{ border: \"1px outset grey\" }}\n            value={groupChatName}\n            onChange={groupChatNameHandler}\n          />\n        </div>\n        <div style={{ margin: \"auto\", textAlign: \"center\" }}>\n          <h3>Select people for group chat</h3>\n          <Checkbox.Group\n            options={usersForChat}\n            onChange={(checkedValues) => {\n              setGroupChatContact(checkedValues);\n            }}\n          />\n        </div>\n      </Modal>\n\n      <Modal\n        title=\"Create Personal Chat\"\n        visible={isPersonalChatModalVisible}\n        onOk={handlePersonalChatOk}\n        onCancel={handleCancel}\n      >\n        <div style={{ margin: \"auto\", textAlign: \"center\" }}>\n          <h3>Select a contact for personal chat</h3>\n          <Radio.Group\n            onChange={(e) => {\n              setPersonalChatContact(e.target.value);\n            }}\n            value={personalChatContact}\n          >\n            {usersForChat.map((user) => (\n              <Radio key={user.label} value={user.value}>\n                {user.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { availableUsers } from \"../../utils/constants\";\nimport bunqLogo from \"../../assets/BunqLogo.svg\";\nexport default function Login({ selectUser }) {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"banner\"></div>\n      <div\n        style={{\n          width: \"100%\",\n          margin: \"auto\",\n          marginTop: \"10%\",\n          textAlign: \"center\",\n        }}\n      >\n        <img src={bunqLogo} alt=\"\" />\n        <h1>Welcome to Bunqr chat</h1>\n        <h3>Please Select your user</h3>\n        <div>\n          {availableUsers.map((user, key) => {\n            return (\n              <button\n                className=\"userButton\"\n                style={{ background: user.bgColor }}\n                key={key}\n                onClick={() => selectUser(user)}\n              >\n                <span className=\"userName\">{user.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Messenger from \"./containers/messenger\";\nimport Login from \"./containers/loginPage\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const selectUserHandler = (userData) => {\n    setUser(userData);\n  };\n  const logoutHandler = () => {\n    setUser(null);\n  };\n\n  useEffect(() => {\n    console.log(\"user updated\", user);\n  }, [user]);\n\n  if (user) {\n    return (\n      <Messenger id={user.value} name={user.label} logout={logoutHandler} />\n    );\n  } else {\n    return <Login selectUser={selectUserHandler} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/BunqLogo.8bd20c99.svg\";","module.exports = __webpack_public_path__ + \"static/media/done_all.211c1153.svg\";","module.exports = __webpack_public_path__ + \"static/media/tag_faces.c50cc449.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic.958bf042.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.282ecb9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/group_chat.963a7dcc.svg\";","module.exports = __webpack_public_path__ + \"static/media/personal_chat.7c72c73f.svg\";","module.exports = __webpack_public_path__ + \"static/media/log-out.2655160e.svg\";","module.exports = __webpack_public_path__ + \"static/media/information.1c737aa4.svg\";"],"sourceRoot":""}